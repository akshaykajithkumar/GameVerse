definitions:
  domain.SubscriptionPlan:
    properties:
      duration:
        type: integer
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  models.AdminLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    type: object
  models.AnalyticsData:
    properties:
      revenue:
        type: number
      subscribers_count:
        type: integer
    type: object
  models.ChangePassword:
    properties:
      old_password:
        type: string
      password:
        type: string
      re_password:
        type: string
    type: object
  models.EditUserProfileResponse:
    properties:
      bio:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  models.EditVideoDetails:
    properties:
      description:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  models.FollowerUser:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  models.FollowingUser:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  models.ForgotPasswordData:
    properties:
      code:
        type: string
      confirm_password:
        maxLength: 20
        minLength: 8
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
      phone:
        type: string
    required:
    - code
    - phone
    type: object
  models.OTPData:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  models.RecommendationListResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      url:
        type: string
      user_id:
        type: integer
    type: object
  models.SetNewName:
    properties:
      current:
        type: string
      new:
        type: string
    type: object
  models.UserDetails:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UserProfileResponse:
    properties:
      bio:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      url:
        type: string
      username:
        type: string
    type: object
  models.VerifyData:
    properties:
      code:
        type: string
      phone:
        type: string
    required:
    - code
    - phone
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact: {}
paths:
  /admin/addtags:
    post:
      description: Add tags to the database
      parameters:
      - description: Comma-separated list of tags
        in: query
        name: tags
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Add Tags
      tags:
      - Admin
  /admin/adminlogin:
    post:
      consumes:
      - application/json
      description: Login handler for admins
      parameters:
      - description: Admin login details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Login
      tags:
      - Admin
  /admin/category:
    get:
      consumes:
      - application/json
      description: Admin can view the list of  Categories
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List Categories
      tags:
      - Admin
  /admin/category/add:
    post:
      consumes:
      - application/json
      description: Admin can add new categories for contents
      parameters:
      - description: category
        in: query
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Add Category
      tags:
      - Admin
  /admin/category/delete:
    delete:
      consumes:
      - application/json
      description: Admin can delete a category
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Delete Category
      tags:
      - Admin
  /admin/category/update:
    patch:
      consumes:
      - application/json
      description: Admin can update name of a category into new name
      parameters:
      - description: set new name
        in: body
        name: set_new_name
        required: true
        schema:
          $ref: '#/definitions/models.SetNewName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Update Category
      tags:
      - Admin
  /admin/deletetags:
    delete:
      description: Delete a tag from the database based on a tag ID
      parameters:
      - description: Tag ID to delete
        in: query
        name: tagID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Delete Tag
      tags:
      - Admin
  /admin/plans:
    get:
      consumes:
      - application/json
      description: using this handler admins can get the list of subscription plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.SubscriptionPlan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get List of Subscription Plans
      tags:
      - Admin
  /admin/plans/add:
    post:
      consumes:
      - application/json
      description: using this handler admins can add a new subscription plan
      parameters:
      - description: Plan Name
        in: query
        name: name
        required: true
        type: string
      - description: Plan Duration (in days)
        in: query
        name: duration
        required: true
        type: integer
      - description: Plan Price
        in: query
        name: price
        required: true
        type: number
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Add Subscription Plan
      tags:
      - Admin
  /admin/plans/delete:
    delete:
      consumes:
      - application/json
      description: using this handler admins can delete a subscription plan
      parameters:
      - description: Plan ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Delete Subscription Plan
      tags:
      - Admin
  /admin/reports:
    get:
      consumes:
      - application/json
      description: Get a paginated list of user reports
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Reports List
      tags:
      - Admin
  /admin/tags:
    get:
      description: Get a list of tags
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Tags
      tags:
      - Admin
  /admin/userReports:
    get:
      consumes:
      - application/json
      description: Get a paginated list of user reports and count
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: limit
        type: integer
      - description: User ID for which reports are requested
        in: query
        name: userId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Reports List
      tags:
      - Admin
  /admin/users/getusers:
    get:
      consumes:
      - application/json
      description: Retrieve users with pagination
      parameters:
      - description: limit
        in: query
        name: limit
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Users
      tags:
      - Admin
  /admin/users/toggle-block:
    post:
      consumes:
      - application/json
      description: using this handler admins can block or unblock an user
      parameters:
      - description: user-id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Block or unblock User
      tags:
      - Admin
  /users/analytics:
    get:
      consumes:
      - application/json
      description: Get analytics data for subscribers count, revenue, and more
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.AnalyticsData'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Analytics
      tags:
      - User
  /users/category:
    get:
      consumes:
      - application/json
      description: User can view the list of  Categories
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List Categories
      tags:
      - User
  /users/category/videos:
    get:
      consumes:
      - application/json
      description: List videos in a specific category based on category ID
      parameters:
      - description: Category ID
        in: query
        name: categoryID
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List Videos by Category
      tags:
      - User
  /users/change-password:
    patch:
      consumes:
      - application/json
      description: user can change their password
      parameters:
      - description: changepassword
        in: body
        name: changepassword
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Change Password
      tags:
      - User
  /users/followersList:
    get:
      consumes:
      - application/json
      description: Get the paginated list of users (ID and username) that the logged-in
        user's followers
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Limit per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FollowerUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Followers List with Pagination
      tags:
      - User
  /users/followingList:
    get:
      consumes:
      - application/json
      description: Get the paginated list of users (ID and username) that the logged-in
        user is following
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Limit per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FollowingUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Following List with Pagination
      tags:
      - User
  /users/forgotpassword:
    post:
      consumes:
      - application/json
      description: Forgot password functionality
      parameters:
      - description: Forgot password data
        in: body
        name: forgotPasswordData
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Forgot Password
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      description: user can log in by giving their details
      parameters:
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - User
  /users/logout:
    post:
      consumes:
      - application/json
      description: Logout the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: User Logout
      tags:
      - User
  /users/plans:
    get:
      consumes:
      - application/json
      description: using this handler users can get the list of subscription plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.SubscriptionPlan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get List of Subscription Plans
      tags:
      - User
  /users/plans/choose-plan:
    post:
      consumes:
      - application/json
      description: User can choose a subscription plan
      parameters:
      - description: creator ID
        in: query
        name: creator_id
        required: true
        type: integer
      - description: Subscription plan ID
        in: query
        name: plan_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Choose Plan
      tags:
      - User
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get the user profile details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get User Profile
      tags:
      - User
  /users/profile/EditProfile:
    patch:
      consumes:
      - multipart/form-data
      description: Edit the user profile including name, email, username, phone, bio,
        and profile picture
      parameters:
      - description: User Profile Request
        in: body
        name: userProfileRequest
        required: true
        schema:
          $ref: '#/definitions/models.EditUserProfileResponse'
      - description: Profile Picture
        in: formData
        name: ProfilePicture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Edit User Profile
      tags:
      - User
  /users/profile/videos:
    get:
      description: List videos for a particular user with pagination
      parameters:
      - description: Limit per page
        in: query
        name: limit
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List Videos
      tags:
      - User
  /users/profile/videos/comment:
    post:
      description: Add a new comment to a video
      parameters:
      - description: Video ID
        in: query
        name: videoID
        required: true
        type: string
      - description: Comment content
        in: query
        name: content
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Comment on Video
      tags:
      - User
  /users/profile/videos/comments:
    get:
      description: Retrieve comments for a specific video
      parameters:
      - description: Video ID
        in: query
        name: videoID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Comments
      tags:
      - User
  /users/profile/videos/delete:
    delete:
      description: Delete a video file based on its ID
      parameters:
      - description: Video ID to be deleted
        in: query
        name: VideoID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Delete Video
      tags:
      - User
  /users/profile/videos/editVideo:
    patch:
      consumes:
      - application/json
      description: Patch the title and description of a video
      parameters:
      - description: Video ID
        in: query
        name: VideoID
        required: true
        type: integer
      - description: Video Details Request
        in: body
        name: videoDetailsRequest
        required: true
        schema:
          $ref: '#/definitions/models.EditVideoDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Edit Video Details
      tags:
      - User
  /users/profile/videos/like:
    post:
      description: Toggle the like status of a video for the authenticated user
      parameters:
      - description: Video ID
        in: query
        name: videoID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Toggle Like Video
      tags:
      - User
  /users/profile/videos/recommendation:
    get:
      description: Generate a recommendation list of videos for the authenticated
        user based on tags.
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecommendationListResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Recommendation List
      tags:
      - User
  /users/reportUser:
    post:
      consumes:
      - application/json
      description: Submit a report for a user
      parameters:
      - description: ID of the user being reported
        in: query
        name: targetUserID
        required: true
        type: integer
      - description: Reason for the report
        in: query
        name: reason
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Report User
      tags:
      - User
  /users/search:
    get:
      consumes:
      - application/json
      description: Search for users by name and return the results in alphabetical
        order with pagination
      parameters:
      - description: Search term for user name
        in: query
        name: searchTerm
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Limit per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Search Users by Name
      tags:
      - User
  /users/search/toggleFollow:
    post:
      consumes:
      - application/json
      description: Toggle the follow status between two users
      parameters:
      - description: ID of the user being followed/unfollowed
        in: query
        name: followingUserID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Toggle Follow
      tags:
      - User
  /users/selectTags:
    post:
      description: Store multiple tags for a specific user
      parameters:
      - description: Comma-separated list of tag IDs (e.g., {1,2})
        in: query
        name: tagIDs
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Store User Tags
      tags:
      - User
  /users/sendotp:
    post:
      consumes:
      - application/json
      description: OTP login send otp
      parameters:
      - description: otp-data
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/models.OTPData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP
      tags:
      - User
  /users/signup:
    post:
      consumes:
      - application/json
      description: user can signup by giving their details
      parameters:
      - description: signup
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/models.UserDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Signup
      tags:
      - User
  /users/tags:
    get:
      description: Get a list of tags
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Tags
      tags:
      - User
  /users/verifyotp:
    post:
      consumes:
      - application/json
      description: OTP login verify otp
      parameters:
      - description: otp-verify
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/models.VerifyData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - User
  /users/videos:
    get:
      description: List/Search videos with sorting and pagination
      parameters:
      - description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Sort order (upload_time, views, likes)
        in: query
        name: sort
        type: string
      - description: Order (asc, desc)
        in: query
        name: order
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List/Search Videos
      tags:
      - User
swagger: "2.0"
